extends layout

block content
  .content-wrapper
  .charts
  .filters-wrapper
    select#mapFilter.Filter(onchange='filter()')
      option(value='' disabled='' selected='') Map Filter
      option(value='Cache') Cache
      option(value='Cobblestone') Cobblestone
      option(value='Dust II') Dust II
      option(value='Inferno') Inferno
      option(value='Mirage') Mirage
      option(value='Nuke') Nuke
      option(value='Overpass') Overpass
      option(value='Train') Train
    select#resultsFilter.Filter(onchange='filter()')
      option(value='' disabled='' selected='') Results Filter
      option(value='win') Win
      option(value='loss') Loss
      option(value='draw') Draw
    input#startDate.Filter(type="date" value="2018-02-07" onchange="filter()")
    input#endDate.Filter(type="date" onchange="filter()")
  .table-wrapper
    table#statsTable
      tr
        th(colspan='3')
        th.user-header(colspan='3') Tim
        th.user-header(colspan='3') Ryan
        th.user-header(colspan='3') Collin
        th.user-header(colspan='3') Sean
        th.user-header(colspan='3') Cal
        th.user-header(colspan='3') Josh
      tr
        th Date
        th Map
        th Score
        th.user-header Rating
        th ADR
        th KDA
        th.user-header Rating
        th ADR
        th KDA
        th.user-header Rating
        th ADR
        th KDA
        th.user-header Rating
        th ADR
        th KDA
        th.user-header Rating
        th ADR
        th KDA
        th.user-header Rating
        th ADR
        th KDA
      tr#averagesHeader
        th(colspan='3') Averages:
        each player in averages
          th= (player.rating/player.count).toFixed(2)
          th= (player.adr/player.count).toFixed(2)
          th= (player.kda/player.count).toFixed(2)
      each match, index in matches
        - var result = match.score[0] != match.score[1] ? (match.score[0] > match.score[1] ? 'win' : 'loss') : 'draw'
        tr(class=result+'_row')
          td #{match.formatted_date}
          td #{match.map}
          td #{match.score[0]}-#{match.score[1]}
          each user, index2 in list
            if user[index] == ''
              td
              td
              td
            else
              td= user[index].rating.toFixed(2)
              td= user[index].adr.toFixed(2)
              td= user[index].kda.toFixed(2)

  script.
    window.onload = function() {todaysDate();}
    //window.onready = function() {getMaps();}

    function todaysDate() {
      var today = new Date();
      var input = document.getElementById("endDate");
      input.value = today.getFullYear() + "-" + ("0" + (today.getMonth() + 1)).slice(-2) + "-" + ("0" + today.getDate()).slice(-2);
    }

    function updateAverages(averages) {
      var header = document.getElementById("averagesHeader");
      var th = header.getElementsByTagName("th");
      for (var i = 0; i <averages.length; i++) {
        th[(3*i)+1].innerHTML = (averages[i].rating / averages[i].count).toFixed(2);
        th[(3*i)+2].innerHTML = (averages[i].adr / averages[i].count).toFixed(2);
        th[(3*i)+3].innerHTML = (averages[i].kda / averages[i].count).toFixed(2);
      }
    }

    function filter() {
      var table = document.getElementById("statsTable");
      var tr = table.getElementsByTagName("tr");
      var resultsInput = document.getElementById("resultsFilter");
      var mapInput = document.getElementById("mapFilter");
      var startDateInput = document.getElementById("startDate");
      var endDateInput = document.getElementById("endDate");
      var resultsFilter = resultsInput.options[resultsInput.selectedIndex].value;
      var mapsFilter = mapInput.options[mapInput.selectedIndex].value;
      var startDateFilter = new Date(startDateInput.value);
      var endDateFilter = new Date(endDateInput.value);
      resultsFilter = resultsFilter.toLowerCase();
      mapsFilter = mapsFilter.toUpperCase();
      var averages = [{
          'rating':0,
          'adr':0,
          'kda':0,
          'count':0
        },
        {
          'rating':0,
          'adr':0,
          'kda':0,
          'count':0
        },
        {
          'rating':0,
          'adr':0,
          'kda':0,
          'count':0
        },
        {
          'rating':0,
          'adr':0,
          'kda':0,
          'count':0
        },
        {
          'rating':0,
          'adr':0,
          'kda':0,
          'count':0
        },
        {
          'rating':0,
          'adr':0,
          'kda':0,
          'count':0
        },
      ];

      for(i = 3; i < tr.length; i++) {
        if (tr[i].classList.contains(resultsFilter+"_row") || resultsFilter == '') {
          td = tr[i].getElementsByTagName("td");
          if (td[1]) {
            if(new Date(td[0].innerHTML) > startDateFilter && new Date(td[0].innerHTML) < endDateFilter) {
              if (td[1].innerHTML.toUpperCase().indexOf(mapsFilter) > -1 || mapsFilter == '') {
                tr[i].style.display = "";
                for(var j = 3; j < td.length; j+=3){
                  if(!td[j].innerHTML == "") {
                    averages[(j/3)-1].rating += parseFloat(td[j].innerHTML);
                    averages[(j/3)-1].adr += parseFloat(td[j+1].innerHTML);
                    averages[(j/3)-1].kda += parseFloat(td[j+2].innerHTML);
                    averages[(j/3)-1].count += 1;
                  }
                }
                /*count++;
                averages['rating'] += parseFloat(td[3].innerHTML);
                averages['adr'] += parseFloat(td[4].innerHTML);
                averages['kdd'] += parseFloat(td[5].innerHTML);
                averages['kpr'] += parseFloat(td[6].innerHTML);*/
                if(td[7].innerHTML == '') {
                  //averages['kpr_t'] += 0;
                } else {
                  //averages['kpr_t'] += parseFloat(td[8].innerHTML);
                }
                if(td[8].innerHTML == '') {
                  //averages['kpr_ct'] += 0;
                } else {
                  //averages['kpr_ct'] += parseFloat(td[8].innerHTML);
                }
                /*averages['trades'] += parseFloat(td[9].innerHTML);
                averages['hs'] += parseFloat(td[10].innerHTML);
                averages['kills'] += parseFloat(td[11].innerHTML);
                averages['assists'] += parseFloat(td[12].innerHTML);
                averages['deaths'] += parseFloat(td[13].innerHTML);
                averages['clutches'] += parseFloat(td[14].innerHTML);*/
              } else {
                tr[i].style.display = "none";
              }
            } else {
                tr[i].style.display = "none";
            }
          }
        } else {
          tr[i].style.display = "none";
        }
      }

      /*averages['rating'] /= count;
      averages['adr'] /= count;
      averages['kdd'] /= count;
      averages['kpr'] /= count;
      averages['kpr_t'] /= count;
      averages['kpr_ct'] /= count;
      averages['trades'] /= count;
      averages['hs'] /= count;
      averages['kills'] /= count;
      averages['assists'] /= count;
      averages['deaths'] /= count;
      averages['clutches'] /= count;*/
      updateAverages(averages);
    }

    function format(date) {
      return (date.getMonth() + 1) + "/" + date.getDate() + "/" + date.getFullYear();
    }
