extends layout

block content
  .content-wrapper
  h1 #{user}
  .charts2
    canvas#myChart2
  .bestBuddies
    h2 Best Buddies
    p Most Assisted By: #{assister}-#{assists_num}
    p Most Assisted: #{assisted}-#{assisted_num}
    p aces: #{aces}
    p 40 bombs: #{k_40}
    p 30 bombs: #{k_30}
    p sub 10: #{sub_10}
    p Win% #{win_per.toFixed(1)}%
    p Loss% #{loss_per.toFixed(1)}%
    p Tie% #{tie_per.toFixed(1)}%
    //canvas#myChart
  .filters-wrapper
    - var this_user= "/users/" + user
    form(action=this_user method='GET')
      select(name="map" multiple)
        option(value='' disabled='' selected='') Map Filter
        option(value='Cache') Cache
        option(value='Cobblestone') Cobblestone
        option(value='Dust II') Dust II
        option(value='Inferno') Inferno
        option(value='Mirage') Mirage
        option(value='Nuke') Nuke
        option(value='Overpass') Overpass
        option(value='Train') Train
      select(name="result")
        option(value='' disabled='' selected='') Results Filter
        option(value='win') Win
        option(value='loss') Loss
        option(value='draw') Draw
      input#startDate.Filter(type="date" name="startDate" value="2016-10-07")
      input#endDate.Filter(type="date" name="endDate")
      input(type="submit" action="Submit")
  .table-wrapper
    table#statsTable.fixed_headers
      tr#header
        th Date
        th Map
        th Score
        th Rating
        th Rating:T
        th Rating:CT
        th Adr
        th Adr:T
        th Adr:CT
        th KDD
        th KPR
        th KPR:T
        th KPR:CT
        th Trades
        th HS%
        th Kills
        th Assists
        th Deaths
        th Clutches
        th Ace
      tr#averagesHeader
        th(colspan='3') Averages:
        th= (averages.rating).toFixed(2)
        th= (averages.rating_t).toFixed(2)
        th= (averages.rating_ct).toFixed(2)
        th= (averages.adr).toFixed(2)
        th= (averages.adr_t).toFixed(2)
        th= (averages.adr_ct).toFixed(2)
        th= (averages.kdd).toFixed(2)
        th= (averages.kpr).toFixed(2)
        th= (averages.kpr_t).toFixed(2)
        th= (averages.kpr_ct).toFixed(2)
        th= (averages.trades).toFixed(2)
        th= (averages.hs).toFixed(2)
        th= (averages.kills).toFixed(2)
        th= (averages.assists).toFixed(2)
        th= (averages.deaths).toFixed(2)
        th= (averages.clutches).toFixed(2)
        th= (averages.fiveK).toFixed(2)

      each stat in stats_list
        - var result = stat.results + "_row"
        - var player_index = stat.players.indexOf(user)
        tr(class=result)
          td #{stat.formatted_date}
          td #{stat.map}
          td #{stat.score[0]}-#{stat.score[1]}
          td= stat.stats_instances[player_index].rating.toFixed(2)
          td= stat.stats_instances[player_index].rating_t.toFixed(2)
          td= stat.stats_instances[player_index].rating_ct.toFixed(2)
          td= stat.stats_instances[player_index].adr.toFixed(2)
          td= stat.stats_instances[player_index].adr_t.toFixed(2)
          td= stat.stats_instances[player_index].adr_ct.toFixed(2)
          td= stat.stats_instances[player_index].kdd
          td= stat.stats_instances[player_index].kpr.toFixed(2)
          if stat.stats_instances[player_index].kpr_t == null
            td= stat.stats_instances[player_index].kpr_t
          else
            td= stat.stats_instances[player_index].kpr_t.toFixed(2)
          td= stat.stats_instances[player_index].kpr_ct.toFixed(2)
          td #{stat.stats_instances[player_index].trade_kills}
          td= stat.stats_instances[player_index].hs.toFixed(2)
          td #{stat.stats_instances[player_index].kills}
          td #{stat.stats_instances[player_index].assists}
          td #{stat.stats_instances[player_index].deaths}
          td #{stat.stats_instances[player_index].clutches}
          td #{stat.stats_instances[player_index].fiveK}

  script.
    window.onload = function() {todaysDate();getMaps();}
    //window.onready = function() {getMaps();}

    function todaysDate() {
      var today = new Date();
      var input = document.getElementById("endDate");
      input.value = today.getFullYear() + "-" + ("0" + (today.getMonth() + 1)).slice(-2) + "-" + ("0" + today.getDate()).slice(-2);
    }

    function format(date) {
      return (date.getMonth() + 1) + "/" + date.getDate() + "/" + date.getFullYear();
    }

    function getMaps() {
      var table = document.getElementById("statsTable");
      var tr = table.getElementsByTagName("tr");
      var mapsInput = document.getElementById("mapFilter");
      var mapsFilter = mapsInput.options[mapsInput.selectedIndex].value;
      var data = {
        "labels": ["Cache", "Overpass", "Inferno", "Nuke", "Mirage", "Train", "Cobblestone", "Dust II"],
        "datasets": [{"label": "Maps", "data":[0,0,0,0,0,0,0,0], "backgroundColor": ["rgb(252, 186, 3)", "rgb(19, 230, 11)", "rgb(6, 116, 207)", "rgb(104, 7, 184)", "rgb(184, 7, 152)", "rgb(184, 7, 7)", "rgb(235, 130, 2)", "rgb(52, 191, 138)"]}]
      };
      for(i = 0; i < tr.length; i++) {
        var td = tr[i].getElementsByTagName("td");
        alert(td[0].innerHTML);
        if(td[1]) {
          var index = data["labels"].indexOf(td[1].innerHTML);
          data["datasets"][0]["Maps"][index] +=1;
        }
      }
      var ctx = document.getElementById("myChart");
      var chart = new Chart(ctx, {
          "type": "pie",
          "data": data,
      });
    }

    var matches = !{JSON.stringify(stats_list)}
    var ctx2 = document.getElementById('myChart2').getContext('2d');
    var dates = [];
    var players = [];
    for(var i = matches.length-1; i >= 0; i--){
      var date = new Date(matches[i].date);
      dates.push((date.getMonth()+1) + "/" + date.getDate() + "/" + date.getFullYear());
      for(match_player in matches[i].players){
        if("#{user}" == matches[i].players[match_player]){
          players.push(matches[i].stats_instances[match_player].rating);
        }
      }
    }

    var myChart2 = new Chart(ctx2, {
      "type": "line",
      "data": {
        "labels": dates,
        "datasets":[
          {"label": "#{user}", "data": players,"fill":false,"borderColor":"rgb(75,192,192)", "spanGaps": true}
        ],
      },
      "options":{
        elements: {
          line: {
              tension: 0
          }
        }
      }
    });
